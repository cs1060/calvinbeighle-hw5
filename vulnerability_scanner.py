#!/usr/bin/env python3
"""
vulnerability_scanner.py

A simple penetration testing tool that scans open TCP ports on localhost
and attempts to connect via HTTP and SSH using a dictionary of credentials.

This script was created with the assistance of Claude 3.7 Sonnet.
"""

import argparse
import nmap
import paramiko
import requests
from requests.auth import HTTPBasicAuth
import sys
import logging
import warnings

# Suppress all warnings
warnings.filterwarnings('ignore')

# Configure logging
logging.getLogger('paramiko').setLevel(logging.CRITICAL)
logging.getLogger('urllib3').setLevel(logging.CRITICAL)

def scan_ports(verbose=False):
    """
    Scan open TCP ports on localhost (127.0.0.1).
    Ignores ports numbered 9000 and higher.
    
    Args:
        verbose (bool): Whether to print verbose output.
        
    Returns:
        list: List of open ports.
    """
    if verbose:
        print("Scanning for open ports...")
    
    # Initialize nmap scanner
    nm = nmap.PortScanner()
    
    # Scan localhost for open TCP ports
    nm.scan('127.0.0.1', arguments='-T4')
    
    open_ports = []
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            if proto == 'tcp':
                for port in nm[host][proto]:
                    if port < 9000 and nm[host][proto][port]['state'] == 'open':
                        open_ports.append(port)
                        if verbose:
                            print(f"Found open port: {port}")
    
    return open_ports

def try_http_auth(port, credentials, verbose=False):
    """
    Attempt to connect to an HTTP server with basic authentication.
    
    Args:
        port (int): Port number to connect to.
        credentials (dict): Dictionary of username:password pairs.
        verbose (bool): Whether to print verbose output.
    """
    if verbose:
        print(f"Trying HTTP auth on port {port}...")
    
    for username, password in credentials.items():
        try:
            url = f"http://127.0.0.1:{port}"
            response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=3)
            if response.status_code == 200:
                print(f"http://{username}:{password}@127.0.0.1:{port} {response.text.strip()}")
        except Exception:
            # Silently handle exceptions
            pass

def try_ssh_auth(port, credentials, verbose=False):
    """
    Attempt to connect to an SSH server with password authentication.
    
    Args:
        port (int): Port number to connect to.
        credentials (dict): Dictionary of username:password pairs.
        verbose (bool): Whether to print verbose output.
    """
    if verbose:
        print(f"Trying SSH auth on port {port}...")
    
    for username, password in credentials.items():
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect('127.0.0.1', port=port, username=username, password=password, timeout=3, banner_timeout=3)
            
            # Execute a command to get the output
            stdin, stdout, stderr = ssh.exec_command('echo success')
            output = stdout.read().decode().strip()
            
            print(f"ssh://{username}:{password}@127.0.0.1:{port} {output}")
            ssh.close()
        except Exception:
            # Silently handle exceptions
            pass

def main():
    """Main function to run the vulnerability scanner."""
    parser = argparse.ArgumentParser(description="Simple penetration testing tool")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args()
    
    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }
    
    # Scan for open ports
    open_ports = scan_ports(args.verbose)
    
    # Try connecting to each open port
    for port in open_ports:
        try_http_auth(port, credentials, args.verbose)
        try_ssh_auth(port, credentials, args.verbose)

if __name__ == "__main__":
    main() 